# Filename:      /etc/skel/.zshrc
# Purpose:       config file for zsh (z shell)
# Authors:       (c) grml-team (grml.org)
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################
# Nowadays, grml's zsh setup lives in only *one* zshrc file.
# That is the global one: /etc/zsh/zshrc (from grml-etc-core).
# It is best to leave *this* file untouched and do personal changes to
# your zsh setup via ${HOME}/.zshrc.local which is loaded at the end of
# the global zshrc.
#
# That way, we enable people on other operating systems to use our
# setup, too, just by copying our global zshrc to their ${HOME}/.zshrc.
# Adjustments would still go to the .zshrc.local file.
################################################################################

## Inform users about upgrade path for grml's old zshrc layout, assuming that:
## /etc/skel/.zshrc was installed as ~/.zshrc,
## /etc/zsh/zshrc was installed as ~/.zshrc.global and
## ~/.zshrc.local does not exist yet.
if [ -r ~/.zshrc -a -r ~/.zshrc.global -a ! -r ~/.zshrc.local ] ; then
    printf '-!-\n'
    printf '-!- Looks like you are using the old zshrc layout of grml.\n'
    printf '-!- Please read the notes in the grml-zsh-refcard, being'
    printf '-!- available at: http://grml.org/zsh/\n'
    printf '-!-\n'
    printf '-!- If you just want to get rid of this warning message execute:\n'
    printf '-!-        touch ~/.zshrc.local\n'
    printf '-!-\n'
fi

# Settings for umask
if (( EUID == 0 )); then
    umask 002
else
    umask 022
fi

# Syntax Highlighting
if [ -e "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
    source "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# Pure Prompt: https://github.com/sindresorhus/pure
if [ -e "$ZDOTDIR/pure" ]; then
    fpath+="$ZDOTDIR/pure"

    PURE_PROMPT_SYMBOL='$'
    PURE_PROMPT_VICMD_SYMBOL=':'

    if [ -f /run/.containerenv ] && [ -f /run/.toolboxenv ]; then
    PURE_PROMPT_SYMBOL='⬢ $'
    PURE_PROMPT_VICMD_SYMBOL='⬢ :'
    fi

    PURE_CMD_MAX_EXEC_TIME=1
    zstyle :prompt:pure:prompt:success color green
    zstyle :prompt:pure:git:stash show yes

    if [ -f /run/.containerenv ] && [ -f /run/.toolboxenv ]; then
    PURE_PROMPT_SYMBOL='⬢ $'
    PURE_PROMPT_VICMD_SYMBOL='⬢ :'
    zstyle :prompt:pure:prompt:success color magenta
    fi

    autoload -U promptinit; promptinit
    prompt pure
fi

# FZF completions and keybindings: https://github.com/junegunn/fzf
# ^R = history, ^T = file, M-C = cd
if [ -e "/usr/share/fzf" ]; then
    source "/usr/share/zsh/site-functions/_fzf"
    source "/usr/share/fzf/shell/key-bindings.zsh"
fi

# Command Not Found handler
# Fedora: https://fedoraproject.org/wiki/Features/PackageKitCommandNotFound
COMMAND_NOT_FOUND=1
GRML_ZSH_CNF_HANDLER=/usr/libexec/pk-command-not-found

# direnv hook
eval "$(direnv hook zsh)"

## ZLE tweaks ##

# ctrl-s will no longer freeze the terminal.
[[ -t 0 && $- = *i* ]] && stty -ixon

# use Vi keybindings
bindkey -v
# fix for backspace in Vi Insert-Mode
bindkey "^?" backward-delete-char

# define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
#WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
WORDCHARS='*?_-.[]~=/&;:!#$%^(){}<>'

# press ctrl-q to quote line:
mquote () {
      zle backward-word
      # RBUFFER="'$RBUFFER'"
      RBUFFER=${(qq)RBUFFER}
      zle end-of-line
}
zle -N mquote && bindkey '^q' mquote

# save half-typed commands
bindkey '\eq' push-line-or-edit

# ring bell before prompt
ring_bell() { printf '\a' }
precmd_functions=(ring_bell $precmd_functions)

# tell gpg-agent to use pinentry on current tty
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye >/dev/null

# alert me if something failed
setopt printexitvalue

# if a new command line being added to the history list duplicates an older
# one, the older command is removed from the list
is4 && setopt histignorealldups

## aliases ##

alias tt++="tt++ -G -r ~/.tintin/config"
alias yadm="git -C ~ --git-dir=.local/share/yadm/repo.git"

## miscellaneous code ##

# Record screen in Wayland
wlrec() {
    wf-recorder -c libx264rgb -p crf=27 -p preset=ultrafast \
                -f "$(date +%Y-%m-%d_%H.%M.%S).mkv"
}

# Record screen in X11
x11rec() {
    ffmpeg -f x11grab -video_size 1920x1080 -framerate 30 -i :0.0 \
           -f pulse -ac 2 -i 0 \
           -codec:a libopus -application voip \
           -codec:v libx264rgb -crf 27 -preset ultrafast \
           "$(date +%Y-%m-%d_%H.%M.%S).mkv"
}

# Record audio in pulseaudio
pulserec() {
    ffmpeg -f pulse -ac 2 -i 0 \
           -codec:a libopus -application voip \
           "$(date +%Y-%m-%d_%H.%M.%S).opus"
}

# Concatenate two media files
ffmpeg-concat() {
    trap "rm ffmpeg-concat.tmp 2> /dev/null" INT
    for i in "$@"; do
        echo "file '$i'" >> ffmpeg-concat.tmp
    done
    ffmpeg -f concat -safe 0 -i ffmpeg-concat.tmp -c copy "$(date +%Y-%m-%d_%H.%M.%S).mkv"
}

# Encrypt a file using GPG
gpg-enc() {
    if [[ -n "$1" ]] ; then
        gpg --symmetric \
            --s2k-mode 3 \
            --s2k-count 65011712 \
            --s2k-digest-algo SHA512 \
            --s2k-cipher-algo AES256 \
            "$1"
    else
        echo "Usage: $0 <file>" >&2
    fi
}

# Decrypt a file using GPG
gpg-dec() {
    if [[ -n "$1" ]] ; then
        gpg --output "${1%.gpg}" --decrypt "$1"
    else
        echo "Usage: $0 <file>" >&2
    fi
}

# Export GPG key
gpg-export-key() {
    if [[ -n "$1" ]] ; then
        cat <(gpg --output - --export "$1") <(gpg --output - --export-secret-key "$1") |\
        gpg --armor --output keys.asc --symmetric --cipher-algo AES256
    else
        echo "Usage: $0 <key>" >&2
    fi
}

# Backup GPG key
gpg-backup-key() {
    if [[ -n "$1" ]] ; then
        gpg --armor --output key.pgp --export-secret-keys --export-options export-backup "$1"
    else
        echo "Usage: $0 <key>" >&2
    fi
}

# Delete all empty directories
rmdempty() {
    if [[ -n "$1" ]] ; then
        find "$1" -empty -type d -delete
    else
        echo "Usage: $0 <path>" >&2
    fi
}

rsyncy() {
  rsync --recursive --links --times --human-readable --human-readable --verbose --partial --progress --modify-window=1 "$@"
}

# Merge $2 into $1
dirmerge() {
    jdupes --soft-abort --recurse --delete --no-prompt --param-order --isolate "$1" "$2"
    echo "Removing empty directories..."
    rmdempty "$2"
    echo "Copy merging..."
    rsync -a "$2"/ "$1"/
    echo "Listing by extension..."
    ls -lX "$1"/**/**
}

# Open a ssh tunnel to a remote host
ssh-tunnel() {
    if [[ -n "$1" ]] ; then
        ssh -D "$2" -q -C -N "$1"
    else
        echo "Usage: $0 <remote host> <port>" >&2
    fi
}

# Find out which libs define a symbol
lcheck() {
    if [[ -n "$1" ]] ; then
        nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1"
    else
        echo "Usage: $0 <function>" >&2
    fi
}

html-tree() {
    tree -H '.' -L 1 --houtro "" --dirsfirst -T -s -D -T "$(basename $PWD)" --charset utf-8 --timefmt '%Y-%m-%d %H:%M:%S' -I "index.html" -o index.html
}

# Some quick Perl-hacks aka /useful/ oneliner
getlinks()   { perl -ne 'while ( m/"((www|ftp|http):\/\/.*?)"/gc ) { print $1, "\n"; }' $* }
gethrefs()   { perl -ne 'while ( m/href="([^"]*)"/gc ) { print $1, "\n"; }' $* }
getanames()  { perl -ne 'while ( m/a name="([^"]*)"/gc ) { print $1, "\n"; }' $* }
getforms()   { perl -ne 'while ( m:(\</?(input|form|select|option).*?\>):gic ) { print $1, "\n"; }' $* }
getstrings() { perl -ne 'while ( m/"(.*?)"/gc ) { print $1, "\n"; }' $*}

# Some quick Python-hacks aka /useful/ oneliner
urlencode()  { python3 -c 'import sys, urllib.parse as ul; print(ul.quote_plus(sys.argv[1]))' $* }
urldecode()  { python3 -c 'import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))' $* }

## END OF FILE #################################################################
